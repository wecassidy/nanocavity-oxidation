######################################################################################
#Script to evaluate H0 cavities

#Written by Joshua Fabian, jfabian@ece.ubc.ca , 2021
######################################################################################

#In order to change properties of the model, use the global model user properties

newproject;
deleteall;
clear;

#####################################################################################
#Declear variables and there inital values in SI units

oxide_thickness = 0e-9;
oxide_radius = 5e-6;
oxide_material = "SiO2 (Glass) - Palik";

name = "sims/h0_" + num2str(oxide_thickness / 1e-9) + "nm";  #name for saving

#Simulation type: 1 for Q-factor, 0 for pulse
sim_type=1;

#random seed for all random generators (5 chars)
random_seed=123456;

#Global settings
gl_center_wavelength = 1.55e-6; #Global center wavelength
gl_wavelength_span = 0.8e-6;    #Global wavelength span

#values for optimization
max_generations=20;
generation_size=30;


#values for H0 cavity
#origin of the cavity
x_pos=0e-9;
y_pos=0e-9;

# Names based on Minkov et al 2015 "Automated optimization of photonic crystal slab cavities"

#center to center distance of the holes
hole_period=0.430e-6;

#Hole shifts for air cladding from Minkov paper
#S1x = 0.21*hole_period;
#S2x = 0.103*hole_period;
#S3x = 0.123*hole_period;
#S4x = 0.004*hole_period;
#S5x = 0.194*hole_period;
#S1y = -0.017*hole_period;
#S2y = 0.067*hole_period;

#Hole shifts based on simulations for cladding
S1x = 85e-9;    #Based on V15
S2x = 32e-9;    #Based on V15
S3x = 60e-9;    #Based on V17
S4x = 100e-9;    #Based on V17
S5x = 35e-9;    #Based on V20 (exact value doesnt seem to matter that much)
S1y = 15e-9;    #Based on V18
S2y = -134e-9;   #Based on V19
S1_1x=0e-9;
S1_1y=0e-9;

#number of holes at the waveguide position
hole_number_wg=10;

#number of holes in x/y direction
hole_number_x=20;
hole_number_y=25;

#radius of the holes
hole_radius=0.120e-6;

#material of the cavity
etch_mat="SiO2 (Glass) - Palik";

#width of the slot and bridge
slot_width=0e-9;
bridge_width=0e-9;

#additional mesh for accuracy over the slot region
slot_mesh=false;
slot_mesh_dy=8e-9:

#additional mesh for accuracy over bridge
bridge_mesh=false;
bridge_mesh_dx=8e-9;

#source settings
source_type=1;  #0 for electrical dipole, 1 for magnetic
source_number=4;    #number of dipol sources
source_window_x=200e-9; #size of the area with sources in x
source_window_y=200e-9; #size of the area with sources in y
source_window_z=50e-9;  #size of the area with sources in z

#values for the analysis script
x_span_analysis=0.15e-6; #size of the analysis region in x
y_span_analysis=0.02e-6; #size of the analysis region in y
z_span_analysis=0;  #size of the analysis region in z

n_monitor_x=2;  #number of time monitors in x 
n_monitor_y=2;  #number of time monitors in y
n_monitor_z=1;  #number of time monitors in z

number_resonances=2;    #number of resonances to search for
make_plots=0;   #1 for plots, 0 for no plots of spectra, signal,...

apo_center=200e-15;    #Apodization center
apo_width_time=50e-15; #Apodization time

#calculation type for the mode volume
calc_type=2; #for explanation of settings use link
#https://support.lumerical.com/hc/en-us/articles/
#360034395374-Calculating-the-modal-volume-of-a-cavity-mode

#origin for rest of simulation
origin_x=0;
origin_y=0;
origin_z=0;

#Values for the waveguide
wg_width=500e-9;    #Width of the waveguide
wg_height = 220e-9;   #Height of the waveguide
wg_mat = "Si (Silicon) - Palik";  #Material of the waveguide
wg_base_angle = 90;   #Sidewall angle of the waveguides

cladding_mat = "SiO2 (Glass) - Palik";    #Cladding Material
box_mat = "SiO2 (Glass) - Palik";    #BOX Material

alpha=0.4;   #Visibility of BOX and cladding


#Values for the FDTD
mesh_accuracy = 3;      #Meshaccuracy settings for the FDTD
layer_count = 16;   #Number of PML layers, standard is 8, higher is better but takes longer
simulation_time = 1.5e-12;

sim_size_self=true;    #If true, use the size specifed below, if false use size based on hole number
sim_size_x = 15e-6;     #Size of the simulation region in x
sim_size_y = 15e-6;     #Size of the simulation region in y
sim_size_z = 3e-6;     #Size of the simulation region in z

x_symmetry=2;   #0 no symmetry, 1 symmetric, 2 anti-symmetric
y_symmetry=2;   #0 no symmetry, 1 symmetric, 2 anti-symmetric
z_symmetry=1;   #0 no symmetry, 1 symmetric, 2 anti-symmetric

#Variables for the frequency analysis
monitor_number=10;
x_span_freq=100e-9;
y_span_freq=100e-9;
z_span_freq=50e-9;


#Variables for the field profile monitors
resonances=matrix(number_resonances,1);
resonances(1)=165.5e12;

#Values for save

name_dat = name+".dat";   
name_fsp = name+".fsp"; 


######################################################################################################
#Define all the setup scripts to avoid syntax errors due to limit of string declaration
#(Lumerical only allows ' and " to declare strings and has no full hierachy -> many errors)

source_setup= '
    deleteall;
    randreset(random_seed); #set random seed
    if(source_0_elec_1_mag==0){
        dipole_type="electric dipole";
    }
    else{
        dipole_type="magnetic dipole";
    }
    for(i=1;i<=source_number;i=i+1){
        adddipole;
        set("name","source_"+num2str(i));
        set("dipole type",dipole_type);
        set("x",origin_x+rand*source_window_x);
        set("y",origin_y+rand*source_window_y);
        set("z",origin_z+rand*source_window_z);
        set("override global source settings",0);
    }
';
        
mode_profile_setup='
    deleteall;
    for(i=1;i<=number_resonances;i=i+1){
        addprofile;
        set("name","profile_"+num2str(i));
        
        set("monitor type","2D Z-normal");
        set("x",origin_x);
        set("y",origin_y);
        set("z",origin_z);
        set("x span",sim_size_x);
        set("y span",sim_size_y);
        
        set("output Px",1);
        set("output Py",1);
        set("output Pz",1);
        set("output power",0);
        
        set("override global monitor settings",1);
        set("use source limits",0);
        set("frequency span",0);
        set("frequency points",1);
        if(sim_type==1){
            set("apodization","start");
            set("apodization center",apo_center);
            set("apodization time width",apo_width_time);
        }
        try{
            eval("f=f_mode_"+num2str(i)+";");
            set("frequency center",f);
        }catch(errMsg);
        if(errMsg=="Error: prompt line 1: f_mode_"+num2str(i)+" is not a valid function or variable name"){
            print("Solution: add additional user property for resonance with name f_mode_"+num2str(i)); 
        }
    }
';

mode_analysis='
    basename = "profile_";
    x = getdata(basename+"1","x");
    y = getdata(basename+"1","y");
    
    f0 = matrix(number_resonances);
    E2 = matrix(length(x),length(y),number_resonances);
    
    for(i=1:number_resonances) {
        mname = basename+num2str(i);
        E2(1:length(x),1:length(y),i) = getelectric(mname);
        f0(i) = getdata(mname,"f");
    }  
';
    
resonance_setup='
    deleteall;        
    
    # Set the random number generator seed.  Change this values
    # to get different random orientation of objects
    randreset(random_seed);
    
    # add time monitors with random position
    for(i=1:N) {  
    addtime;
    set("name","t_freq_"+num2str(i));
    set("x",origin_x+rand*x_span_freq);
    set("y",origin_y+rand*y_span_freq);
    set("z",origin_z+rand*z_span_freq);
    }
';

resonance_analysis = read("res_analysis.lsf");

q_setup = read("q_factor.lsf");

q_analysis = read("q_factor_analysis.lsf");

geometry_setup = read("geometry.lsf");

cavity_setup = read("cavity.lsf");

volume_setup = read("volume.lsf");

volume_analysis = read("vol_analysis.lsf");

######################################################################################################
#set everything as setup script of the model

#add all variables as userproperties for the model
adduserprop("sim_type",0,sim_type);
adduserprop("random_seed",0,random_seed);
adduserprop("file_prefix", 1, name);
adduserprop("gl_center_wavelength",2,gl_center_wavelength);
adduserprop("gl_wavelength_span",2,gl_wavelength_span);

adduserprop("x_pos",2,x_pos);
adduserprop("y_pos",2,y_pos);

adduserprop("hole_number_x",0,hole_number_x);
adduserprop("hole_number_y",0,hole_number_y);
adduserprop("hole_number_wg",0,hole_number_wg);
adduserprop("hole_period",2,hole_period);
adduserprop("hole_radius",2,hole_radius);
adduserprop("oxide_thickness", 2, oxide_thickness);
adduserprop("oxide_radius", 2, oxide_radius);
adduserprop("oxide_material", 5, oxide_material);
adduserprop("slot_width",2,slot_width);
adduserprop("bridge_width",2,bridge_width);

adduserprop("S1x",2,S1x);
adduserprop("S2x",2,S2x);
adduserprop("S3x",2,S3x);
adduserprop("S4x",2,S4x);
adduserprop("S5x",2,S5x);
adduserprop("S1y",2,S1y);
adduserprop("S2y",2,S2y);
adduserprop("S1_1x",2,S1_1x);
adduserprop("S1_1y",2,S1_1y);

adduserprop("slot_mesh",0,slot_mesh);
adduserprop("slot_mesh_dy",2,slot_mesh_dy);
adduserprop("bridge_mesh",0,bridge_mesh);
adduserprop("bridge_mesh_dx",2,bridge_mesh_dx);

adduserprop("source_0_elec_1_mag",0,source_type);
adduserprop("source_number",0,source_number);
adduserprop("source_window_x",2,source_window_x);
adduserprop("source_window_y",2,source_window_y);
adduserprop("source_window_z",2,source_window_z);

adduserprop("x_span_analysis",2,x_span_analysis);
adduserprop("y_span_analysis",2,y_span_analysis);
adduserprop("z_span_analysis",2,z_span_analysis);
adduserprop("n_monitor_x",0,n_monitor_x);
adduserprop("n_monitor_y",0,n_monitor_y);
adduserprop("n_monitor_z",0,n_monitor_z);

adduserprop("number_resonances",0,number_resonances);
adduserprop("make_plots",0,make_plots);

adduserprop("apo_center",3,apo_center);
adduserprop("apo_width_time",3,apo_width_time);
adduserprop("etch_mat",5,etch_mat);

adduserprop("origin_x",2,origin_x);
adduserprop("origin_y",2,origin_y);
adduserprop("origin_z",2,origin_z);

adduserprop("wg_width",2,wg_width);
adduserprop("wg_height",2,wg_height);
adduserprop("wg_mat",5,wg_mat);
adduserprop("wg_base_angle",0,wg_base_angle);

adduserprop("box_mat",5,box_mat);
adduserprop("cladding_mat",5,cladding_mat);
adduserprop("alpha",0,alpha);

adduserprop("mesh_accuracy",0,mesh_accuracy);
adduserprop("layer_count",0,layer_count);
adduserprop("simulation_time",3,simulation_time);

adduserprop("sim_size_x",2,sim_size_x);
adduserprop("sim_size_y",2,sim_size_y);
adduserprop("sim_size_z",2,sim_size_z);

adduserprop("sim_size_self",0,sim_size_self);
adduserprop("x_symmetry",0,x_symmetry);
adduserprop("y_symmetry",0,y_symmetry);
adduserprop("z_symmetry",0,z_symmetry);

adduserprop("monitor_number",0,monitor_number);
adduserprop("x_span_freq",2,x_span_freq);
adduserprop("y_span_freq",2,y_span_freq);
adduserprop("z_span_freq",2,z_span_freq);

adduserprop("calc_type",0,calc_type);


#give all scripts as strings to the model
adduserprop("geometry_setup",1,geometry_setup);
adduserprop("cavity_setup",1,cavity_setup);
adduserprop("source_setup",1,source_setup);
adduserprop("mode_profile_setup",1,mode_profile_setup);
adduserprop("mode_analysis",1,mode_analysis);
adduserprop("resonance_setup",1,resonance_setup);
adduserprop("resonance_analysis",1,resonance_analysis);
adduserprop("q_setup",1,q_setup);
adduserprop("q_analysis",1,q_analysis);
adduserprop("volume_setup",1,volume_setup);
adduserprop("volume_analysis",1,volume_analysis);

set("Setup Script", read("setup.lsf"));


if(sim_type==1){
    # Add optimization routine
    addsweep(1);
        setsweep("optimization", "name", "qOptimizer");
        setsweep("qOptimizer", "Type", "Maximize");
        setsweep("qOptimizer", "algorithm", "Particle Swarm");
        setsweep("qOptimizer", "maximum generations", max_generations);
        setsweep("qOptimizer", "generation size", generation_size);
        setsweep("qOptimizer", "tolerance", 0);
        
        # define the parameters
        #hole_period, hole_radius, S1x,S2x,S3x,S4x,S5x,S1y,S2y
        
        para = struct;
        para.Parameter = "::model::hole_period";
        para.Type = "Length";
        para.Min = 0.35e-6;
        para.Max = 0.6e-6;
        para.Units = "microns";
        para.name = "hole_period";
        
        # add the parameter to the optimization
        addsweepparameter("qOptimizer", para);
        
        para = struct;
        para.Parameter = "::model::hole_radius";
        para.Type = "Length";
        para.Min = 0.1e-6;
        para.Max = 0.25e-6;
        para.Units = "microns";
        para.name = "hole_radius";
        
        # add the parameter to the optimization
        addsweepparameter("qOptimizer", para);
        
        para = struct;
        para.Parameter = "::model::S1x";
        para.Type = "Length";
        para.Min = -0.5*hole_period;
        para.Max = 0.5*hole_period;
        para.Units = "microns";
        para.name = "S1x";
        
        # add the parameter to the optimization
        addsweepparameter("qOptimizer", para);
        
        para = struct;
        para.Parameter = "::model::S2x";
        para.Type = "Length";
        para.Min = -0.5*hole_period;
        para.Max = 0.5*hole_period;
        para.Units = "microns";
        para.name = "S2x";
        
        # add the parameter to the optimization
        addsweepparameter("qOptimizer", para);
        
        para = struct;
        para.Parameter = "::model::S3x";
        para.Type = "Length";
        para.Min = -0.5*hole_period;
        para.Max = 0.5*hole_period;
        para.Units = "microns";
        para.name = "S3x";
        
        # add the parameter to the optimization
        addsweepparameter("qOptimizer", para);
        
        para = struct;
        para.Parameter = "::model::S4x";
        para.Type = "Length";
        para.Min = -0.5*hole_period;
        para.Max = 0.5*hole_period;
        para.Units = "microns";
        para.name = "S4x";
        
        # add the parameter to the optimization
        addsweepparameter("qOptimizer", para);
        
        para = struct;
        para.Parameter = "::model::S5x";
        para.Type = "Length";
        para.Min = -0.5*hole_period;
        para.Max = 0.5*hole_period;
        para.Units = "microns";
        para.name = "S5x";
        
        # add the parameter to the optimization
        addsweepparameter("qOptimizer", para);
        
        para = struct;
        para.Parameter = "::model::S1y";
        para.Type = "Length";
        para.Min = -0.5*hole_period;
        para.Max = 0.5*hole_period;
        para.Units = "microns";
        para.name = "S1y";
        
        # add the parameter to the optimization
        addsweepparameter("qOptimizer", para);
        
        para = struct;
        para.Parameter = "::model::S2y";
        para.Type = "Length";
        para.Min = -0.5*hole_period;
        para.Max = 0.5*hole_period;
        para.Units = "microns";
        para.name = "S2y";
        
        # add the parameter to the optimization
        addsweepparameter("qOptimizer", para);
        
        # define figure of merit
        result_1 = struct;
        result_1.Name = "Q_max";
        result_1.Result = "::model::Qanalysis::Q_max";
        result_1.Optimize = true;
        
        # add the figure of merit Qmax to the optimization
        addsweepresult("qOptimizer", result_1);
        
        
    # add a new sweep and set basic properties
    addsweep;
        setsweep("sweep", "name", "holeSweep");
        setsweep("holeSweep", "type", "Ranges");
        setsweep("holeSweep", "number of points", 20);
        
        para = struct;
        para.Parameter = "::model::hole_period";
        para.Type = "Length";
        para.Start = 300e-9;
        para.Stop = 600e-9;
        para.Units = "microns";
        para.name = "hole_period";
        
        # add the parameter to the sweep
        addsweepparameter("holeSweep", para);
        
        # define result
        result_1 = struct;
        result_1.Name = "Q_max";
        result_1.Result = "::model::Qanalysis::Q_max";
        
        # add the result Qmax to the sweep
        addsweepresult("holeSweep", result_1);
        
        
    insertsweep("holeSweep");
        setsweep("sweep","name","radiusSweep");
        setsweep("radiusSweep", "type", "Ranges");
        setsweep("radiusSweep", "number of points", 20);
        
        para = struct;
        para.Parameter = "::model::hole_radius";
        para.Type = "Length";
        para.Start = 50e-9;
        para.Stop = 300e-9;
        para.Units = "microns";
        para.name = "hole_radius";
        
        # add the parameter to the sweep
        addsweepparameter("radiusSweep", para); 
        
        # define result
        result_1 = struct;
        result_1.Name = "Q_max";
        result_1.Result = "Q_max";
        
        # add the result Qmax to the sweep
        addsweepresult("radiusSweep", result_1);
        
        
    # add a new sweep and set basic properties
    addsweep;
        setsweep("sweep", "name", "S1xSweep");
        setsweep("S1xSweep", "type", "Ranges");
        setsweep("S1xSweep", "number of points", 30);
        
        para = struct;
        para.Parameter = "::model::S1x";
        para.Type = "Length";
        para.Start = 70e-9;
        para.Stop = 105e-9;
        para.Units = "microns";
        para.name = "S1x";
        
        # add the parameter to the sweep
        addsweepparameter("S1xSweep", para);
        
        # define result
        result_1 = struct;
        result_1.Name = "Q_max";
        result_1.Result = "::model::Qanalysis::Q_max";
        
        # add the result Qmax to the sweep
        addsweepresult("S1xSweep", result_1);
        
        # define result
        result_1 = struct;
        result_1.Name = "Lambda_0";
        result_1.Result = "::model::Qanalysis::lam0";
        
        # add the result Qmax to the sweep
        addsweepresult("S1xSweep", result_1);
        
    insertsweep("S1xSweep");
        setsweep("sweep","name","S2xSweep");
        setsweep("S2xSweep", "type", "Ranges");
        setsweep("S2xSweep", "number of points", 20);
        
        para = struct;
        para.Parameter = "::model::S2x";
        para.Type = "Length";
        para.Start = 10e-9;
        para.Stop = 60e-9;
        para.Units = "microns";
        para.name ="S2x";
        
        # add the parameter to the sweep
        addsweepparameter("S2xSweep", para); 
        
        # define result
        result_1 = struct;
        result_1.Name = "Q_max";
        result_1.Result = "Q_max";
        
        # add the result Qmax to the sweep
        addsweepresult("S2xSweep", result_1);
        
        # define result
        result_1 = struct;
        result_1.Name = "Lambda_0";
        result_1.Result = "Lambda_0";
        
        # add the result Qmax to the sweep
        addsweepresult("S2xSweep", result_1);
        
        
    # add a new sweep and set basic properties
    addsweep;
        setsweep("sweep", "name", "S1ySweep");
        setsweep("S1ySweep", "type", "Ranges");
        setsweep("S1ySweep", "number of points", 21);
        
        para = struct;
        para.Parameter = "::model::S1y";
        para.Type = "Length";
        para.Start = -100e-9;
        para.Stop = 100e-9;
        para.Units = "microns";
        para.name = "S1y";
        
        # add the parameter to the sweep
        addsweepparameter("S1ySweep", para);
        
        # define result
        result_1 = struct;
        result_1.Name = "Q_max";
        result_1.Result = "::model::Qanalysis::Q_max";
        
        # add the result Qmax to the sweep
        addsweepresult("S1ySweep", result_1);
        
    insertsweep("S1ySweep");
        setsweep("sweep","name","S2ySweep");
        setsweep("S2ySweep", "type", "Ranges");
        setsweep("S2ySweep", "number of points", 21);
        
        para = struct;
        para.Parameter = "::model::S2y";
        para.Type = "Length";
        para.Start = -100e-9;
        para.Stop = 100e-9;
        para.Units = "microns";
        para.name ="S2y";
        
        # add the parameter to the sweep
        addsweepparameter("S2ySweep", para); 
        
        # define result
        result_1 = struct;
        result_1.Name = "Q_max";
        result_1.Result = "Q_max";
        
        # add the result Qmax to the sweep
        addsweepresult("S2ySweep", result_1);
    
    # add a new sweep and set basic properties
    addsweep;
        setsweep("sweep", "name", "S3xSweep");
        setsweep("S3xSweep", "type", "Ranges");
        setsweep("S3xSweep", "number of points", 21);
        
        para = struct;
        para.Parameter = "::model::S3x";
        para.Type = "Length";
        para.Start = -150e-9;
        para.Stop = 150e-9;
        para.Units = "microns";
        para.name = "S3x";
        
        # add the parameter to the sweep
        addsweepparameter("S3xSweep", para);
        
        # define result
        result_1 = struct;
        result_1.Name = "Q_max";
        result_1.Result = "::model::Qanalysis::Q_max";
        
        # add the result Qmax to the sweep
        addsweepresult("S3xSweep", result_1);
        
    insertsweep("S3xSweep");
        setsweep("sweep","name","S4xSweep");
        setsweep("S4xSweep", "type", "Ranges");
        setsweep("S4xSweep", "number of points", 21);
        
        para = struct;
        para.Parameter = "::model::S4x";
        para.Type = "Length";
        para.Start = -150e-9;
        para.Stop = 150e-9;
        para.Units = "microns";
        para.name ="S4x";
        
        # add the parameter to the sweep
        addsweepparameter("S4xSweep", para); 
        
        # define result
        result_1 = struct;
        result_1.Name = "Q_max";
        result_1.Result = "Q_max";
        
        # add the result Qmax to the sweep
        addsweepresult("S4xSweep", result_1);  
        
        
    # add a new sweep and set basic properties
    addsweep;
        setsweep("sweep", "name", "S5xSweep");
        setsweep("S5xSweep", "type", "Ranges");
        setsweep("S5xSweep", "number of points", 40);
        
        para = struct;
        para.Parameter = "::model::S5x";
        para.Type = "Length";
        para.Start = -150e-9;
        para.Stop = 150e-9;
        para.Units = "microns";
        para.name = "S5x";
        
        # add the parameter to the sweep
        addsweepparameter("S5xSweep", para);
        
        # define result
        result_1 = struct;
        result_1.Name = "Q_max";
        result_1.Result = "::model::Qanalysis::Q_max";
        
        # add the result Qmax to the sweep
        addsweepresult("S5xSweep", result_1);
        
    # add a new sweep and set basic properties
    addsweep;
        setsweep("sweep", "name", "S1_1xSweep");
        setsweep("S1_1xSweep", "type", "Ranges");
        setsweep("S1_1xSweep", "number of points", 10);
        
        para = struct;
        para.Parameter = "::model::S1_1x";
        para.Type = "Length";
        para.Start = 0e-9;
        para.Stop = 150e-9;
        para.Units = "microns";
        para.name = "S1_1x";
        
        # add the parameter to the sweep
        addsweepparameter("S1_1xSweep", para);
        
        # define result
        result_1 = struct;
        result_1.Name = "Q_max";
        result_1.Result = "::model::Qanalysis::Q_max";
        
        # add the result Qmax to the sweep
        addsweepresult("S1_1xSweep", result_1);
        
    insertsweep("S1_1xSweep");
        setsweep("sweep","name","S1_1ySweep");
        setsweep("S1_1ySweep", "type", "Ranges");
        setsweep("S1_1ySweep", "number of points", 10);
        
        para = struct;
        para.Parameter = "::model::S1_1y";
        para.Type = "Length";
        para.Start = 0e-9;
        para.Stop = 150e-9;
        para.Units = "microns";
        para.name ="S1_1y";
        
        # add the parameter to the sweep
        addsweepparameter("S1_1ySweep", para); 
        
        # define result
        result_1 = struct;
        result_1.Name = "Q_max";
        result_1.Result = "Q_max";
        
        # add the result Qmax to the sweep
        addsweepresult("S1_1ySweep", result_1);
}  

if(sim_type==1){ 
    #Set global simulation properties for source and monitor
    setglobalsource("center wavelength",gl_center_wavelength);
        setglobalsource("wavelength span", gl_wavelength_span); 
        setglobalmonitor("use source limits",0);
        setglobalmonitor("frequency points",1);
        setglobalmonitor("wavelength center",gl_center_wavelength);
}
else if(sim_type==0){ 
    #Set global simulation properties for source and monitor
    setglobalsource("center wavelength",gl_center_wavelength);
        setglobalsource("wavelength span", 0); 
        setglobalmonitor("use source limits",0);
        setglobalmonitor("frequency points",100);
        setglobalmonitor("wavelength center",gl_center_wavelength);
} 
#Save in the current directory under the given name
save(name);