################################################
# Description: resonance finder
#
# Calculates the spectrum of resonances of |E|^2
# and |H|^2. Plots the results, and outputs
# a vector of wavelength (lambda) and
# frequency (f) of resonant peaks
#
# Copyright 2010, Lumerical Solutions, Inc.
################################################

#################################################
# input parameters:
#    number_resonances - number of resonances to look for

frequency_points = 2^12; # the number of points of resolution to use in the frequency domain.

#################################################
# get some monitor data from first monitor
#################################################
mname = "t_freq_1"; # monitor name
component = "Hz"; # field component
t = getdata(mname,"t");
field0_t = pinch(getdata(mname,component));

############################################################
# find range of frequencies where we have some source power
# and restrict analysis to that range
############################################################
w = fftw(t,1);
sn2 = abs(sourcenorm(w/(2*pi)))^2;
max_sn2 = max(sn2);
p1 = 1;
for(p1=1; sn2(p1) < 1e-2*max_sn2; p1=p1+1) { 1; }
for(p2=p1; sn2(p2) < 0.9*max_sn2; p2=p2+1) { 1; }
for(p2=p2; (sn2(p2) > 1e-2*max_sn2) and (p2 < length(sn2)-1); p2=p2+1) { 1; }
w = linspace(w(p1),w(p2),frequency_points);
f_res = w/(2*pi);
lambda = c/f_res;

#################################################
# do fft to frequency domain for all monitors
#################################################

#set the time apodization settings as a fraction of total simulation time
fractional_time_width = 1/6;
fractional_time_center = 1/2;
apodize = exp( - 0.5*(t-max(t)*fractional_time_center)^2/(fractional_time_width*max(t))^2);

spectrum_res = 0;
for(i=1:N) {
    mname = "t_freq_" + num2str(i);
    for(j=1:3) {
    if(almostequal(j,1)) { component = "Ex"; }
    if(almostequal(j,2)) { component = "Ey"; }
    if(almostequal(j,3)) { component = "Ez"; }
    if(almostequal(j,4)) { component = "Hx"; }
    if(almostequal(j,5)) { component = "Hy"; }
    if(almostequal(j,6)) { component = "Hz"; }
    if(j > 3.5) { extra_factor = sqrt( mu0/eps0); }
    else { extra_factor = 1; }
    if(havedata(mname,component)) {
        spectrum_res =   spectrum_res +
                abs( extra_factor*czt(apodize*pinch(getdata(mname,component)),t,w) )^2;
    }
}
}

spectrum_res = spectrum_res / abs(sourcenorm(f_res))^2;
plot(
  lambda * 1e6,
  log10(spectrum_res),
  "wavelength (microns)",
  "spectrum, logscale (a.u.)",
  num2str(oxide_thickness / 1e-9) + "nm oxide layers in nanobeam cavity"
);
plot(
  f_res * 1e-12,
  log10(spectrum_res),
  "frequency (THz)",
  "spectrum, logscale (a.u.)",
  num2str(oxide_thickness / 1e-9) + "nm oxide layers in nanobeam cavity"
);

#################################################
# find resonant peaks
#################################################
p = findpeaks(spectrum_res,number_resonances);
lambda0 = lambda(p);
f0 = f_res(p);

#################################################
# output results
#################################################
for(i=1:length(lambda0)) {
print("Resonances " + num2str(i) + ":");
print("  wavelength = " + num2str(lambda0(i)*1e9) + " nm");
print("  frequency = " + num2str(f0(i)*1e-12) + " THz");

    write(
        "nanobeam_resonance.dat",
        num2str(oxide_thickness * 1e9)
        + ","
        + num2str(i)
        + ","
        + num2str(lambda0(i) * 1e9)
        + ","
        + num2str(f0(i) * 1e-12)
    );
}

spectrum_file = "nanobeam_spectrum.dat";
for (i=1:length(spectrum_res)) {
    write(
        spectrum_file,
        num2str(oxide_thickness * 1e9)
        + ","
        + num2str(lambda(i) * 1e9)
        + ","
        + num2str(f_res(i) * 1e-12)
        + ","
        + num2str(spectrum_res(i))
    );
}