######################################################################################
#Script to evaluate linear cavity with holes, slot and nanobeam

#Written by Joshua Fabian, jfabian@ece.ubc.ca , 2021
######################################################################################

#In order to change properties of the model, use the global model user properties

newproject;
deleteall;
clear;

#####################################################################################
#Declear variables and there inital values in SI units

oxide_thickness = 10e-9;
oxide_length = 10e-6;
oxide_material = "SiO2 (Glass) - Palik";

name = "sims/nanobeam_" + num2str(oxide_thickness / 1e-9) + "nm";  #name for saving

#random seed for all random generators (5 chars)
random_seed=123456;

#Global settings
gl_center_wavelength = 1.55e-6; #Global center wavelength
gl_wavelength_span = 0.8e-6;    #Global wavelength span

#values for optimization
max_generations=20;
generation_size=40;


#values for nanobeam_slot_cavity
#origin of the cavity
x_pos=0e-9;
y_pos=0e-9;

#unused
orientation="x";

## Values based on Choi paper

#distance between the inner most holes
mirror_distance=440.2e-9;

#widths of the slot connecting the holes
slot_width=40e-9;

#number of holes on each side
hole_number=10;

#center to center distance of the holes
hole_period=510e-9;

#radius of the holes
hole_radius=0.3437*hole_period;

#number of tapered holes, counted from the center
taper_number=5;

#strength of tapering
radius_taper_strength=0.65; #0.1 means innermost hole is 0.1*r
period_taper_strength=0.65; #0.1 means innermost hole distance 0.1*d #0.67

#width of the bridge
bridge_width=10e-9;

#additional mesh for accuracy over the slot region
slot_mesh=true;
slot_mesh_dy=2e-9;

#additional mesh for accuracy over bridge
bridge_mesh=true;
#bridge_mesh_dx=0.5e-9;
bridge_mesh_dx=bridge_width/20;

#source settings
source_type=1;  #0 for electrical dipole, 1 for magnetic
source_number=10;    #number of dipol sources
source_window_x=300e-9; #size of the area with sources in x
source_window_y=200e-9; #size of the area with sources in y
source_window_z=50e-9;  #size of the area with sources in z

#values for the analysis script
x_span_analysis=0.013e-6; #size of the analysis region in x
y_span_analysis=0.02e-6; #size of the analysis region in y
z_span_analysis=0;  #size of the analysis region in z

n_monitor_x=2;  #number of time monitors in x
n_monitor_y=2;  #number of time monitors in y
n_monitor_z=1;  #number of time monitors in z

number_resonances=2;    #number of resonances to search for
make_plots=0;   #1 for plots, 0 for no plots of spectra, signal,...

apo_center=200e-15;    #Apodization center
apo_width_time=50e-15; #Apodization time

#calculation type for the mode volume
calc_type=2; #for explanation of settings use link
#https://support.lumerical.com/hc/en-us/articles/
#360034395374-Calculating-the-modal-volume-of-a-cavity-mode

#material of the cavity
etch_mat="etch";


#origin for rest of simulation
origin_x=0;
origin_y=0;
origin_z=0;


#Values for the waveguide
wg_width=550e-9;    #Width of the waveguide
wg_height = 220e-9;   #Height of the waveguide
wg_mat = "Si (Silicon) - Palik";  #Material of the waveguide
wg_base_angle = 90;   #Sidewall angle of the waveguides

cladding_mat = "etch";    #Cladding Material
box_mat = "etch";    #BOX Material

alpha=0.4;   #Visibility of BOX and cladding

#mode_profile_point_number = 5; #Number of selected mode profile points


#Values for the FDTD
mesh_accuracy = 3;      #Meshaccuracy settings for the FDTD
layer_count = 16;   #Number of PML layers, standard is 8, higher is better but takes longer
simulation_time = 1.5e-12;
fdtd_size_x = mirror_distance+2*hole_number*hole_period+hole_radius*2;     #Size of the FDTD-region in x
fdtd_size_y = 2e-6;     #Size of the FDTD-region in y
fdtd_size_z = 1.4e-6;     #Size of the FDTD-region in z
y_symmetry=2;   #0 no symmetry, 1 symmetric, 2 anti-symmetric
x_symmetry=1;   #0 no symmetry, 1 symmetric, 2 anti-symmetric
z_symmetry=1;   #0 no symmetry, 1 symmetric, 2 anti-symmetric

#Variables for the frequency analysis
monitor_number=10;
x_span_freq=100e-9;
y_span_freq=100e-9;
z_span_freq=50e-9;


#Variables for the field profile monitors
#resonances=matrix(number_resonances,1);
#resonances(1)=205e12;
x_pos_profile=0; #Position of the profile monitor in x
y_pos_profile=0; #Position of the profile monitor in y
x_span_profile = fdtd_size_x;   #Size of the profile monitor in x
y_span_profile = fdtd_size_y;   #Size of the profile monitor in y


#Values for the volume monitor
x_pos_volume=0; #Position of the volume monitor in x
y_pos_volume=0; #Position of the volume monitor in y
x_span_volume = fdtd_size_x;   #Size of the volume monitor in x
y_span_volume = fdtd_size_y;   #Size of the volume monitor in y
z_span_volume = fdtd_size_z;   #Size of the volume monitor in z

#Values for save

name_dat = name+".dat";
name_fsp = name+".fsp";


######################################################################################################
#Define all the setup scripts to avoid syntax errors due to limit of string declaration
#(Lumerical only allows ' and " to declare strings and has no full hierachy -> many errors)

source_setup= '
    deleteall;
    randreset(random_seed); #set random seed
    if(source_0_elec_1_mag==0){
        dipole_type="electric dipole";
    }
    else{
        dipole_type="magnetic dipole";
    }
    for(i=1;i<=source_number;i=i+1){
        adddipole;
        set("name","source_"+num2str(i));
        set("dipole type",dipole_type);
        set("x",origin_x+rand*source_window_x);
        set("y",origin_y+rand*source_window_y);
        set("z",origin_z+rand*source_window_z);
        set("override global source settings",0);
    }
';

mode_profile_setup='
    deleteall;
    for(i=1;i<=number_resonances;i=i+1){
        addprofile;
        set("name","profile_"+num2str(i));

        set("monitor type","2D Z-normal");
        set("x",x_pos_profile);
        set("y",y_pos_profile);
        set("z",z_pos_profile);
        set("x span",x_span_profile);
        set("y span",y_span_profile);

        set("output Px",1);
        set("output Py",1);
        set("output Pz",1);
        set("output power",0);

        set("override global monitor settings",1);
        set("use source limits",0);
        set("frequency span",0);
        set("frequency points",1);
        set("apodization","start");
        set("apodization center",apo_center);
        set("apodization time width",apo_width_time);
        try{
            eval("f=f_mode_"+num2str(i)+";");
            set("frequency center",f);
        }catch(errMsg);
        if(errMsg=="Error: prompt line 1: f_mode_"+num2str(i)+" is not a valid function or variable name"){
            print("Solution: add additional user property for resonance with name f_mode_"+num2str(i));
        }
    }
';

mode_analysis='
    basename = "profile_";
    x = getdata(basename+"1","x");
    y = getdata(basename+"1","y");

    f0 = matrix(number_resonances);
    E2 = matrix(length(x),length(y),number_resonances);

    for(i=1:number_resonances) {
        mname = basename+num2str(i);
        E2(1:length(x),1:length(y),i) = getelectric(mname);
        f0(i) = getdata(mname,"f");
    }
';

resonance_setup='
    deleteall;

    # Set the random number generator seed.  Change this values
    # to get different random orientation of objects
    randreset(random_seed);

    # add time monitors with random position
    for(i=1:N) {
    addtime;
    set("name","t_freq_"+num2str(i));
    set("x",origin_x+rand*x_span_freq);
    set("y",origin_y+rand*y_span_freq);
    set("z",origin_z+rand*z_span_freq);
    }
';

resonance_analysis = read("res_analysis.lsf");

q_setup = read("q_factor.lsf");

q_analysis = read("q_factor_analysis.lsf");

geometry_setup = read("geometry.lsf");

cavity_setup = read("cavity.lsf");

volume_setup = read("volume.lsf");

volume_analysis = read("vol_analysis.lsf");

######################################################################################################
#set everything as setup script of the model

#add all variables as userproperties for the model
adduserprop("random_seed",0,random_seed);
adduserprop("file_prefix", 1, name);
adduserprop("gl_center_wavelength",2,gl_center_wavelength);
adduserprop("gl_wavelength_span",2,gl_wavelength_span);
adduserprop("x_pos",2,x_pos);
adduserprop("y_pos",2,y_pos);
adduserprop("orientation",1,orientation);
adduserprop("mirror_distance",2,mirror_distance);
adduserprop("slot_width",2,slot_width);
adduserprop("hole_number",0,hole_number);
adduserprop("hole_period",2,hole_period);
adduserprop("hole_radius",2,hole_radius);
adduserprop("oxide_thickness", 2, oxide_thickness);
adduserprop("oxide_length", 2, oxide_length);
adduserprop("oxide_material", 5, oxide_material);
adduserprop("taper_number",0,taper_number);
adduserprop("radius_taper_strength",0,radius_taper_strength);
adduserprop("period_taper_strength",0,period_taper_strength);
adduserprop("bridge_width",2,bridge_width);
adduserprop("slot_mesh",0,slot_mesh);
adduserprop("slot_mesh_dy",2,slot_mesh_dy);
adduserprop("bridge_mesh",0,bridge_mesh);
adduserprop("bridge_mesh_dx",2,bridge_mesh_dx);
adduserprop("source_0_elec_1_mag",0,source_type);
adduserprop("source_number",0,source_number);
adduserprop("source_window_x",2,source_window_x);
adduserprop("source_window_y",2,source_window_y);
adduserprop("source_window_z",2,source_window_z);
adduserprop("x_span_analysis",2,x_span_analysis);
adduserprop("y_span_analysis",2,y_span_analysis);
adduserprop("z_span_analysis",2,z_span_analysis);
adduserprop("n_monitor_x",0,n_monitor_x);
adduserprop("n_monitor_y",0,n_monitor_y);
adduserprop("n_monitor_z",0,n_monitor_z);
adduserprop("number_resonances",0,number_resonances);
adduserprop("make_plots",0,make_plots);
adduserprop("apo_center",3,apo_center);
adduserprop("apo_width_time",3,apo_width_time);
adduserprop("etch_mat",5,etch_mat);
adduserprop("origin_x",2,origin_x);
adduserprop("origin_y",2,origin_y);
adduserprop("origin_z",2,origin_z);
adduserprop("wg_width",2,wg_width);
adduserprop("wg_height",2,wg_height);
adduserprop("wg_mat",5,wg_mat);
adduserprop("wg_base_angle",0,wg_base_angle);
adduserprop("box_mat",5,box_mat);
adduserprop("cladding_mat",5,cladding_mat);
adduserprop("alpha",0,alpha);
adduserprop("mesh_accuracy",0,mesh_accuracy);
adduserprop("layer_count",0,layer_count);
adduserprop("simulation_time",3,simulation_time);
adduserprop("fdtd_size_y",2,fdtd_size_y);
adduserprop("fdtd_size_z",2,fdtd_size_z);
adduserprop("x_symmetry",0,x_symmetry);
adduserprop("y_symmetry",0,y_symmetry);
adduserprop("z_symmetry",0,z_symmetry);
adduserprop("monitor_number",0,monitor_number);
adduserprop("x_span_freq",2,x_span_freq);
adduserprop("y_span_freq",2,y_span_freq);
adduserprop("z_span_freq",2,z_span_freq);
adduserprop("x_pos_profile",2,x_pos_profile);
adduserprop("y_pos_profile",2,y_pos_profile);
adduserprop("x_pos_volume",2,x_pos_volume);
adduserprop("y_pos_volume",2,y_pos_volume);
adduserprop("calc_type",0,calc_type);


#give all scripts as strings to the model
adduserprop("geometry_setup",1,geometry_setup);
adduserprop("cavity_setup",1,cavity_setup);
adduserprop("source_setup",1,source_setup);
adduserprop("mode_profile_setup",1,mode_profile_setup);
adduserprop("mode_analysis",1,mode_analysis);
adduserprop("resonance_setup",1,resonance_setup);
adduserprop("resonance_analysis",1,resonance_analysis);
adduserprop("q_setup",1,q_setup);
adduserprop("q_analysis",1,q_analysis);
adduserprop("volume_setup",1,volume_setup);
adduserprop("volume_analysis",1,volume_analysis);

set("Setup Script", read("setup.lsf"));

#add optimization routine
addsweep(1);
    setsweep("optimization", "name", "qOptimizer");
    setsweep("qOptimizer", "Type", "Maximize");
    setsweep("qOptimizer", "algorithm", "Particle Swarm");
    setsweep("qOptimizer", "maximum generations", max_generations);
    setsweep("qOptimizer", "generation size", generation_size);
    setsweep("qOptimizer", "tolerance", 0);

    # define the parameters
    #mirror_distance, hole_period, hole_radius
    para = struct;
    para.Parameter = "::model::mirror_distance";
    para.Type = "Length";
    para.Min = 0.3e-6;
    para.Max = 0.7e-6;
    para.Units = "microns";

    # add the parameter to the optimization
    addsweepparameter("qOptimizer", para);

    para = struct;
    para.Parameter = "::model::hole_period";
    para.Type = "Length";
    para.Min = 0.4e-6;
    para.Max = 0.6e-6;
    para.Units = "microns";

    # add the parameter to the optimization
    addsweepparameter("qOptimizer", para);

    para = struct;
    para.Parameter = "::model::hole_radius";
    para.Type = "Length";
    para.Min = 0.1e-6;
    para.Max = 0.25e-6;
    para.Units = "microns";

    # add the parameter to the optimization
    addsweepparameter("qOptimizer", para);

    para = struct;
    para.Parameter = "::model::radius_taper_strength";
    para.Type = "Number";
    para.Min = 0.5;
    para.Max = 0.8;

    # add the parameter to the optimization
    addsweepparameter("qOptimizer", para);

    para = struct;
    para.Parameter = "::model::period_taper_strength";
    para.Type = "Number";
    para.Min = 0.5;
    para.Max = 0.8;

    # add the parameter to the optimization
    addsweepparameter("qOptimizer", para);

    # define figure of merit
    result_1 = struct;
    result_1.Name = "Q_max";
    result_1.Result = "::model::Qanalysis::Q_max";
    result_1.Optimize = true;

    # add the figure of merit Qmax to the optimization
    addsweepresult("qOptimizer", result_1);


addsweep;
    setsweep("sweep", "name", "RTaperSweep");
    setsweep("RTaperSweep", "type", "Ranges");
    setsweep("RTaperSweep", "number of points", 20);

    para = struct;
    para.Parameter = "::model::radius_taper_strength";
    para.Type = "Number";
    para.Start = 0.5;
    para.Stop = 1;
    para.name = "RadiusTaper";

    # add the parameter to the sweep
    addsweepparameter("RTaperSweep", para);

    # define result
    result_1 = struct;
    result_1.Name = "Q_max";
    result_1.Result = "::model::Qanalysis::Q_max";

    # add the result Qmax to the sweep
    addsweepresult("RTaperSweep", result_1);

    # define result
    result_1 = struct;
    result_1.Name = "Lambda_0";
    result_1.Result = "::model::Qanalysis::lam0";

    # add the result Qmax to the sweep
    addsweepresult("RTaperSweep", result_1);

insertsweep("RTaperSweep");
    setsweep("sweep","name","PTaperSweep");
    setsweep("PTaperSweep", "type", "Ranges");
    setsweep("PTaperSweep", "number of points", 20);

    para = struct;
    para.Parameter = "::model::period_taper_strength";
    para.Type = "Number";
    para.Start =0.5;
    para.Stop = 1;
    para.name ="PeriodTaper";

    # add the parameter to the sweep
    addsweepparameter("PTaperSweep", para);

    # define result
    result_1 = struct;
    result_1.Name = "Q_max";
    result_1.Result = "Q_max";

    # add the result Qmax to the sweep
    addsweepresult("PTaperSweep", result_1);

    # define result
    result_1 = struct;
    result_1.Name = "Lambda_0";
    result_1.Result = "Lambda_0";

    # add the result Qmax to the sweep
    addsweepresult("PTaperSweep", result_1);

#Set global simulation properties for source and monitor
setglobalsource("center wavelength",gl_center_wavelength);
    setglobalsource("wavelength span", gl_wavelength_span);
    setglobalmonitor("use source limits",0);
    setglobalmonitor("frequency points",1);
    setglobalmonitor("wavelength center",gl_center_wavelength);

#Save in the current directory under the given name
save(name);
